# DNSCHANGE
# - name: "disable interface {{nat_adapter}} before join domain"
#   win_shell: netsh interface set interface "{{nat_adapter}}" disable

- name: disable the registration of the {{nat_adapter}} interface (NAT address) in DNS
  ansible.windows.win_shell: |
    $adapter = Get-NetAdapter -Name '{{nat_adapter}}'
    Set-DNSClient -InterfaceIndex $adapter.ifIndex -RegisterThisConnectionsAddress $false
  when: two_adapters == "yes"

- name: Ensure that domain exists
  win_domain:
    domain_netbios_name: "{{netbios_name}}"
    dns_domain_name: "{{domain}}"
    safe_mode_password: "{{domain_password}}"
  register: check_domain

- name: Reboot to complete domain creation
  win_reboot:
    reboot_timeout: 900
    post_reboot_delay: 100
  when: check_domain.changed

- name: Ensure the server is a domain controller
  win_domain_controller:
    dns_domain_name: "{{domain}}"
    domain_admin_user: "Administrator@{{domain}}"
    domain_admin_password: "{{domain_password}}"
    safe_mode_password: "{{domain_password}}"
    state: domain_controller
  register: check_domain_controller

- name: Reboot to complete domain controller setup
  win_reboot:
    reboot_timeout: 900
    post_reboot_delay: 100
  when: check_domain_controller.changed

# DNSCHANGE
# - name: "enable interface {{nat_adapter}} after domain joined"
#   win_shell: netsh interface set interface "{{nat_adapter}}" enable
#   register: enable_interface_dc
#   until: "enable_interface_dc is not failed"
#   retries: 3
#   delay: 120

- name: Be sure DNS feature is installed
  win_feature:
    name: DNS
    state: present

- name: Check for xDnsServer Powershell module
  win_psmodule:
    name: xDnsServer
    state: present

- name: enable only the {{domain_adapter}} interface (local) for DNS client requests
  ansible.windows.win_shell: |
    $adapter = Get-NetAdapter -Name '{{domain_adapter}}'
    $dnsClient = Get-DnsClient -InterfaceIndex $adapter.ifIndex
    Set-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -ServerAddresses '{{ hostvars[dict_key].ansible_host }}'
  when: two_adapters == "yes"

- name: Configure DNS Forwarders
  win_dsc:
    resource_name: xDnsServerForwarder
    IsSingleInstance: "yes"
    UseRootHint: false
    IPAddresses:
      - "1.1.1.1"
      - "9.9.9.9"

#- name: install nuget
#  win_shell: install-packageprovider -name nuget -force

- name: Ensure PSGallery repository is registered
  win_shell: |
    if (-not (Get-PSRepository -Name 'PSGallery' -ErrorAction SilentlyContinue)) {
      Register-PSRepository -Name 'PSGallery' -SourceLocation 'https://www.powershellgallery.com/api/v2' -InstallationPolicy Trusted
    }

- name: Update PackageManagement module
  win_shell: |
    Install-Module -Name PackageManagement -Force -AllowClobber -Scope CurrentUser    

- name: Update PowerShellGet module
  win_shell: |
    Install-Module -Name PowerShellGet -Force -AllowClobber

- name: Install ActiveDirectory module
  win_psmodule:
    name: ActiveDirectory
    state: present

- name: Install ActiveDirectoryDSC module
  win_psmodule:
    name: ActiveDirectoryDSC
    state: present

- name: Ensure Administrator is part of Enterprise Admins
  win_domain_group_membership:
    name: "Enterprise Admins"
    members:
      - Administrator
    state: present

- name: Ensure Administrator is part of Domain Admins
  win_domain_group_membership:
    name: "Domain Admins"
    members:
      - Administrator
    state: present
